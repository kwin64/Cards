{"version":3,"sources":["components/test.module.css","reportWebVitals.ts","components/Profile.tsx","components/Authorization.tsx","components/Registration.tsx","components/UpdatePassword.tsx","components/EnteringPassword.tsx","components/Test.tsx","components/ErrorPage.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Profile","props","Authorization","Registration","UpdatePassword","EnteringPassword","Test","className","s","container","searchInput","placeholder","checkboxInput","type","ErrorPage","App","exact","path","render","from","to","ReactDOM","document","getElementById"],"mappings":"0EACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,YAAc,4B,sFCarDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qCCLDQ,EAAsC,SAAAC,GAI/C,OAJyD,YAE9CA,GAGP,2CCLKC,EAAkD,SAAAD,GAI3D,OAJqE,YAE1DA,GAGP,iDCLKE,EAAgD,SAAAF,GAIzD,OAJmE,YAExDA,GAGP,gDCLKG,EAAoD,SAAAH,GAI7D,OAJuE,YAE5DA,GAGP,kDCLKI,EAAwD,SAAAJ,GAIjE,OAJ2E,YAEhEA,GAGP,oD,iBCJKK,EAAgC,SAAAL,GAIzC,OAJmD,YAExCA,GAGP,sBAAKM,UAAWC,IAAEC,UAAlB,UACI,uBAAOF,UAAWC,IAAEE,YACbC,YAAY,aAEnB,uCACA,uBAAOJ,UAAWC,IAAEI,cACbC,KAAK,iBCZXC,EAAsC,SAAAb,GAI/C,OAJyD,YAE9CA,GAGP,6CCED,SAASc,IACZ,OACI,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOD,KAAM,iBAAkBC,OAAQ,kBAAM,cAAC,EAAD,OAC7C,cAAC,IAAD,CAAOD,KAAM,gBAAiBC,OAAQ,kBAAM,cAAC,EAAD,OAC5C,cAAC,IAAD,CAAOD,KAAM,OAAQC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAM,UAAWC,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOD,KAAM,QAASC,OAAQ,kBAAM,cAAC,EAAD,OACpC,cAAC,IAAD,CAAUC,KAAM,IAAKC,GAAI,cChBzCC,IAASH,OACL,cAAC,IAAD,UACI,cAACH,EAAD,MAEFO,SAASC,eAAe,SAM9BhC,M","file":"static/js/main.7b0a83b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"test_container__3b3xp\",\"searchInput\":\"test_searchInput__1vF1K\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\ntype PropsProfileType = {}\n\nexport const Profile: React.FC<PropsProfileType> = props => {\n\n    const {} = props\n\n    return (\n        <div>\n            Profile\n        </div>\n    );\n}\n","import React from 'react';\n\ntype PropsAuthorizationType = {}\n\nexport const Authorization: React.FC<PropsAuthorizationType> = props => {\n\n    const {} = props\n\n    return (\n        <div>\n            Authorization\n        </div>\n    );\n}\n","import React from 'react';\n\ntype PropsRegistrationType = {}\n\nexport const Registration: React.FC<PropsRegistrationType> = props => {\n\n    const {} = props\n\n    return (\n        <div>\n            Registration\n        </div>\n    );\n}\n","import React from 'react';\n\ntype PropsUpdatePasswordType = {}\n\nexport const UpdatePassword: React.FC<PropsUpdatePasswordType> = props => {\n\n    const {} = props\n\n    return (\n        <div>\n            UpdatePassword\n        </div>\n    );\n}\n","import React from 'react';\n\ntype PropsEnteringPasswordType = {}\n\nexport const EnteringPassword: React.FC<PropsEnteringPasswordType> = props => {\n\n    const {} = props\n\n    return (\n        <div>\n            EnteringPassword\n        </div>\n    );\n}\n","import React from 'react';\nimport s from './test.module.css'\n\ntype PropsTestType = {}\n\nexport const Test: React.FC<PropsTestType> = props => {\n\n    const {} = props\n\n    return (\n        <div className={s.container}>\n            <input className={s.searchInput}\n                   placeholder='Search..'\n            />\n            <button>X</button>\n            <input className={s.checkboxInput}\n                   type=\"checkbox\"\n            />\n        </div>\n    );\n}\n","import React from 'react';\n\ntype PropsErrorType = {}\n\nexport const ErrorPage: React.FC<PropsErrorType> = props => {\n\n    const {} = props\n\n    return (\n        <div>\n            ErrorPage\n        </div>\n    );\n}\n","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport './App.module.css';\nimport {Profile} from \"./components/Profile\";\nimport {Authorization} from \"./components/Authorization\";\nimport {Registration} from \"./components/Registration\";\nimport {UpdatePassword} from \"./components/UpdatePassword\";\nimport {EnteringPassword} from './components/EnteringPassword';\nimport {Test} from \"./components/Test\";\nimport {ErrorPage} from \"./components/ErrorPage\";\n\nexport function App() {\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/'} render={() => <Profile/>}/>\n                <Route path={'/authorization'} render={() => <Authorization/>}/>\n                <Route path={'/registration'} render={() => <Registration/>}/>\n                <Route path={'/404'} render={() => <ErrorPage/>}/>\n                <Route path={'/update'} render={() => <UpdatePassword/>}/>\n                <Route path={'/enter'} render={() => <EnteringPassword/>}/>\n                <Route path={'/test'} render={() => <Test/>}/>\n                <Redirect from={'*'} to={'/404'}/>\n            </Switch>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport { App } from './App';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n    , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}